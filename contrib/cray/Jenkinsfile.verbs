// Copyright (c) 2018. Cray Inc. All rights reserved.
// Libfabric Verbs provider Jenkins Pipeline file

// This pipeline uses shared pipeline libraries for the following
// functions:
//   -- launch
//   -- publish
@Library('CrayNetworkCI@master') _

pipeline {
    options {
        // Generic build options
        timeout (time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '15'))

        // Build options
        disableConcurrentBuilds()
        timestamps()
        skipStagesAfterUnstable()
    }
    agent {
        node {
            label 'wham'
        }
    }
    stages {
        stage('Prologue') {
            steps {
                // creating git short hash
                script {
                    GIT_SHORT_COMMIT = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    if (env.BRANCH_NAME == 'master' || buildingTag()) {
                        LIBFABRIC_INSTALL_PATH = "$ROOT_BUILD_PATH/libfabric/$GIT_SHORT_COMMIT"
                    } else {
                        // use a temporary directory within the workspace
                        LIBFABRIC_INSTALL_PATH = pwd tmp: true
                    }
                }

                // verify requirements
                sh 'contrib/cray/verify_requirements.sh'
            }
        }
        stage('Build') {
            failFast true
            parallel {
                stage("Build and install libfabric") {
                    steps {
                        sh './autogen.sh'
                        sh "./configure --prefix=$LIBFABRIC_INSTALL_PATH"
                        sh "make -j 12"
                        sh "make install"
                    }
                }
                stage("Create latest symlink") {
                    when {
                        expression { env.BRANCH_NAME == 'master' }
                    }
                    steps {
                        script {
                            publish env.LIBFABRIC_BUILD_PATH, "latest", "$GIT_SHORT_COMMIT"
                        }
                    }
                }
            }
        }
        stage('Test') {
            environment {
                LD_LIBRARY_PATH = "$LIBFABRIC_INSTALL_PATH/lib:$LD_LIBRARY_PATH"
                MPIR_CVAR_OFI_USE_PROVIDER = 'verbs;ofi_rxm'
            }
            parallel {
                stage('Unit tests') {
                    steps {
                        echo 'placeholder'
                    }
                }
                stage('Smoke tests') {
                    steps {
                        // checking for the presence of the verbs provider
                        script {
                            launch "${LIBFABRIC_INSTALL_PATH}/bin/fi_info -p \'ofi_rxm;verbs\'", 1, 1
                        }
                    }
                }
                stage('Fabtests') {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            script {
                                launch 'contrib/cray/fabtest_wrapper.sh', 2, 1
                            }
                        }
                    }
                }
                stage('SFT tests') {
                    environment {
                        SFT_BIN = "${SFT_INSTALL_PATH + '/bin'}"
                        SFT_ADD_ARGS = "--additional-args ' '"
                        SFT_MAX_JOB_TIME = '3'
                        SFT_NUM_JOBS = '4'
                        SFT_PROVIDER = 'verbs;ofi_rxm'
                        SFT_BASELINE_DIR = "contrib/cray"
                        SFT_BASELINE_RESULTS_FILE = 'sft_test_results_baseline.txt'
                        SFT_PREVIOUS_BASELINE_RESULTS = 'sft_test_results_baseline.txt'
                        SFT_TEST_CMDS = 'sft_test_commands'
                        SFT_TEST_RESULTS = 'sft_test_results.xml'
                        SFT_TEST_RESULTS_EXPECTED = 'expected_'
                        SFT_TEST_RESULTS_PREFIX = 'BUILD_'
                        SFT_TEST_RESULTS_CI = 'sft_ci_results.yaml'
                        SFT_TEST_RESULTS_BASE_DIR = "${ROOT_BUILD_PATH}" + "/sft_test_results/"
                        SFT_TEST_RESULTS_DIR = ""
                    }
                    steps {
                        script {
                            def cur_date_time = new Date().format('yyyy_MM_dd_HH_mm_ss')
                            SFT_TEST_RESULTS_SUBDIR = "${SFT_TEST_RESULTS_PREFIX}" + env.BUILD_ID + "_DATE_" + "${cur_date_time}"
                            SFT_TEST_RESULTS_DIR = "${SFT_TEST_RESULTS_BASE_DIR}" + "${SFT_TEST_RESULTS_SUBDIR}"
                        }
                        // Simple clean-up from any prior run
                        sh """
                            rm -f ${SFT_BIN}/core*
                            rm -rf ${SFT_TEST_RESULTS_DIR}
                            mkdir -p ${SFT_TEST_RESULTS_DIR}
                        """

                        // run the test
                        script {
                            try {
                                dir ("${SFT_BIN}") {
                                    timeout(time: 15, unit: 'MINUTES') {
                                        sh """
                                            ./ci-all.sh \\
                                                --provider '${SFT_PROVIDER}' \\
                                                -L ${SFT_TEST_RESULTS_DIR} \\
                                                --num-jobs ${SFT_NUM_JOBS} \\
                                                --max-job-time ${SFT_MAX_JOB_TIME} \\
                                                --output-cmds ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_CMDS} \\
                                                --results-file ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_CI} \\
                                                ${SFT_ADD_ARGS}
                                        """
                                    }
                                }
                            } catch (exc) {
                                echo 'failed test, ignore result for now'
                            }
                        }
                    }
                    post {
                        always {
                            sh """
                                cp  ./${SFT_BASELINE_DIR}/${SFT_BASELINE_RESULTS_FILE} ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE}
                                ${SFT_BIN}/sft_parse_test_results.pm -b ${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE} -d ${SFT_TEST_RESULTS_DIR} -o ${SFT_TEST_RESULTS} -r ${SFT_BASELINE_RESULTS_FILE}
                                gzip -r ${SFT_TEST_RESULTS_DIR}
                                gunzip ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS}
                                gunzip ${SFT_TEST_RESULTS_DIR}/${SFT_BASELINE_RESULTS_FILE}
                                gunzip ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE}
                                cp -r ${SFT_TEST_RESULTS_DIR} .
                            """
                            // archive the results
                            archiveArtifacts artifacts: "${SFT_TEST_RESULTS_SUBDIR}/*"

                            // skip validation of SFT for now until intermittent errors are fixed
                            step ([$class: 'XUnitBuilder',
                                    thresholds: [
                                        [$class: 'FailedThreshold', unstableThreshold: '1000000']],
                                    tools: [[$class: 'JUnitType', pattern: "${SFT_TEST_RESULTS_SUBDIR}/${SFT_TEST_RESULTS}"]]])

                            // remove result directory after parsing
                            sh "rm -rf ${SFT_TEST_RESULTS_DIR} || true"
                        }
                    }
                }
                stage("System tests") {
                    steps {
                        echo 'placeholder'
                    }
                }
                stage("MPI pt2pt: OSU latency") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/pt2pt/osu_latency", 2, 1
                        }
                    }
                }
                stage("MPI pt2pt: OSU bandwidth") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/pt2pt/osu_bw", 2, 1
                        }
                    }
                }
                stage("MPI pt2pt: OSU mbw_mr") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/pt2pt/osu_mbw_mr", 8, 4
                        }
                    }
                }
                stage("MPI one-sided: OSU get latency") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/one-sided/osu_get_latency", 2, 1
                        }
                    }
                }
                stage("MPI one-sided: OSU get bandwidth") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/one-sided/osu_get_bw", 2, 1
                        }
                    }
                }
                stage("MPI one-sided: OSU put latency") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/one-sided/osu_put_latency", 2, 1
                        }
                    }
                }
                stage("MPI one-sided: OSU put bt") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/one-sided/osu_put_bw", 2, 1
                        }
                    }
                }
                stage("MPI one-sided: OSU put bibw") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/one-sided/osu_put_bibw", 2, 1
                        }
                    }
                }
                stage("MPI collective: OSU allreduce") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_allreduce -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU allgather") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_allgather -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU allgatherv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_allgatherv -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU alltoall") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_alltoall -f", 20, 5
                        }
                    }
                }
                stage("MPI collective: OSU alltoallv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_alltoallv -f", 20, 5
                        }
                    }
                }
                stage("MPI collective: OSU barrier") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_barrier -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU broadcast") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_bcast -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU gather") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_gather -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU gatherv") {
                    when {
                        expression { env.TEST_GATHER == 'true' }
                    }
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_gatherv -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU iallgather") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_iallgather -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU iallgatherv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_iallgatherv -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU ialltoall") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_ialltoall -f", 20, 5
                        }
                    }
                }
                stage("MPI collective: OSU ialltoallv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_ialltoallv -f", 20, 5
                        }
                    }
                }
                stage("MPI collective: OSU ialltoallw") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_ialltoallw -f", 20, 5
                        }
                    }
                }
                stage("MPI collective: OSU ibarrier") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_ibarrier -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU ibcast") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_ibcast -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU igather") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_igather -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU igatherv") {
                    when {
                        expression { env.TEST_GATHER == 'true' }
                    }
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_igatherv -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU iscatter") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_iscatter -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU iscatterv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_iscatterv -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU reduce") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_reduce -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU reduce_scatter") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_reduce_scatter -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU scatter") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_scatter -f", 40, 10
                        }
                    }
                }
                stage("MPI collective: OSU Scatterv") {
                    steps {
                        timeout (time: 5, unit: 'MINUTES') {
                            launch "$OMB_BUILD_PATH/collective/osu_scatterv -f", 40, 10
                        }
                    }
                }
            }
        }
        stage("Deploy") {
            when {
                allOf {
                    expression { currentBuild.result == 'SUCCESS' } ;
                    anyOf {
                        expression { env.BRANCH_NAME == 'master' } ;
                        buildingTag()
                    }
                }
            }
            failFast true
            parallel {
                stage("Create stable link") {
                    when {
                        expression { env.BRANCH_NAME == 'master' }
                    }
                    steps {
                        script {
                            publish env.LIBFABRIC_BUILD_PATH, "stable", "$GIT_SHORT_COMMIT"
                        }
                    }
                }
                stage("Create tagged link") {
                    when {
                        buildingTag()
                    }
                    steps {
                        script {
                            publish env.LIBFABRIC_BUILD_PATH, "$BRANCH_NAME", "$GIT_SHORT_COMMIT"
                        }
                    }
                }
                stage("Create RPMs") {
                    steps {
                        sh 'make dist-bzip2'
                        sh '$WORKSPACE/contrib/buildrpm/buildrpmLibfabric.sh -i verbs -i sockets -osmv $(ls libfabric-*.tar.bz2)'
                    }
                    post {
                        success {
                            stash name: 'rpms', includes: 'rpmbuild/RPMS/**/*'
                            stash name: 'sources',  includes: 'rpmbuild/SOURCES/*'
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                try {
                    unstash 'rpms'
                    unstash 'sources'
                    archiveArtifacts 'rpmbuild/SOURCES/*'
                    archiveArtifacts 'rpmbuild/RPMS/**/*'
                }
                catch (Exception e) {
                    echo 'No rpms to archive'
                }
            }
        }
        changed {
            script {
                // send email when the state of the pipeline changes
                // only sends email to @cray.com
                def emailBody = '${SCRIPT, template="libfabric-template.groovy"}'
                def providers = []
                def defaultMailer = ''

                if (env.BRANCH_NAME == 'master') {
                    defaultMailer = mailingList()
                } else {
                    providers.add ( [$class: 'CulpritsRecipientProvider'] )
                    providers.add ( [$class: 'RequesterRecipientProvider'] )
                    providers.add ( [$class: 'DevelopersRecipientProvider'] )
                }
                emailext subject: '$DEFAULT_SUBJECT',
                    body: emailBody,
                    mimeType: 'text/html',
                    recipientProviders: providers,
                    replyTo: '$DEFAULT_REPLYTO',
                    to: defaultMailer
             }
        }
    }
    environment {
        GIT_SHORT_COMMIT = "$GIT_COMMIT"
        LIBFABRIC_INSTALL_PATH = ""
        ROOT_BUILD_PATH = "/scratch/jenkins/builds"
        FABTEST_PATH = "${ROOT_BUILD_PATH + '/fabtests/stable'}"
        LIBFABRIC_BUILD_PATH = "${ROOT_BUILD_PATH + '/libfabric'}"
        OMB_BUILD_PATH = "${ROOT_BUILD_PATH + '/osu-micro-benchmarks/5.4.2/libexec/osu-micro-benchmarks/mpi'}"
        MPICH_PATH = "${ROOT_BUILD_PATH + '/mpich/3.3b3'}"
        SFT_INSTALL_PATH = "${ROOT_BUILD_PATH + '/libfabric-sft/stable'}"
        TEST_GATHER = "false"
    }
}
